version: "3.5"

services:
  zookeeper:
    container_name: zookeeper
    image: "docker.io/bitnami/zookeeper:3"
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami/zookeeper"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka-test
    image: "docker.io/bitnami/kafka:latest"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181 # 设置Kafka连接到ZooKeeper的地址
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_KRAFT_MODE=false # 如果使用ZooKeeper，需要将KRAFT模式设置为false
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper # 确保Kafka在ZooKeeper启动之后启动

  kafka-ui:
    container_name: kafka-ui-test
    image: provectuslabs/kafka-ui
    ports:
      - "9090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=localhost:9092
    depends_on:
      - kafka # 确保Kafka UI在Kafka启动之后启动

volumes:
  zookeeper_data:
  kafka_data: